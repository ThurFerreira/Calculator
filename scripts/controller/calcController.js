class CalcController {

    constructor(){

        this._audio = new Audio('click.mp3');
        this._audioOnOff = false;
        this._lastOperator = '';
        this._lastNumber = '';

        //select the html element by class tag and puttin on a variable, then we can manipulate them 
        this._locale = "pt-BR";
        this._displayCalcEL = document.querySelector("#display");
        this._dateEL = document.querySelector("#data");
        this._timeEL = document.querySelector("#hora");

        this._operation = [];
        this._currentDate;
        this.initialize();
        this.initButtonsEvents();
        this.initKeyboard();
        
    }

     //"inner.HTML" can put a information inside of the object that referes it in HTML format
     get displayDate(){
        return this._dateEL.innerHTML;
    }

    set displayDate(value){
        this._dateEL.innerHTML = value;
    }

    get displayTime(){
        return this._timeEL.innerHTML;
    }

    set displayTime(value){
        this._timeEL.innerHTML = value;
    }

    get displayCalc(){
        return this._displayCalcEL.innerHTML; //returns the information of display
    }

    set displayCalc(value){
        
        if(value.toString().length > 10){
            this.setError();
            return false;
        }

        this._displayCalcEL.innerHTML = value;
    }

    get currentDate(){
        return new Date();
    }

    set currentDate(value){
        this._currentDate = value;
    }

//TRABALHANDO COM AREA DE TRANSFERENCIA//

    copyToClipboard(){

        let input = document.createElement('input');

        input.value = this.displayCalc;
        
        document.body.appendChild(input);

        input.select();

        document.execCommand("Copy");

        input.remove();

    }

    pasteFromClipboard(){

        document.addEventListener("paste", e=>{

            let text = e.clipboardData.getData("Text");

            this.displayCalc = parseFloat(text);
        });

    }
////////////////////////////////////////////

    initialize(){

        this.setDispayDateTime();
        
        //setInterval - function executed in a time interval (time is marked as miliseconds)
        setInterval(()=>{ //getting the id generated by browser for this setInterval

            this.setDispayDateTime();
            
        }, 1000); //in this case, the function is executed again every 1000 milisenconds

        this.setLastNumberToDisplay();
        this.pasteFromClipboard();

        document.querySelectorAll(".btn-ac").forEach(btn=>{

            btn.addEventListener("dblclick", e=> {
                this.toggleAudio();

            });
        });

    }

    toggleAudio(){

        this._audioOnOff = !this._audioOnOff;

        //if ternario | se for true recebe false, se for false recebe true
        //this._audioOnOff = (this._audioOnOff) ? false : true

        /*
        if(this._audioOnOff){
            this._audioOnOff = false;

        }else{
            this._audioOnOff = true;
        }
        */
    }

    playAudio(){

        if(this._audioOnOff){
            this._audio.currentTime = 0;
            this._audio.play();

        }
    }

    initKeyboard(){
        
         document.addEventListener('keyup', e=>{

            this.playAudio();
            
            switch (e.key) {

                case "Escape":
    
                    this.clearAll();        
                    break;
    
                case "Backspace":
    
                    this.clearEntry();
                    break;
    
                case '+':
                case '-':
                case '*':
                case '/':
                case '%':

                    this.addOperation(e.key);
                    break;
    
                case "Enter":
                case '=':
                    this.calculate();
                    break;
                
                case '.':
                case ',':

                    this.addDot();
                    break
                
                case "0":
                case "1":
                case "2":
                case "3":
                case "4":
                case "5":
                case "6":
                case "7":
                case "8":
                case "9":
    
                    this.addOperation(parseInt(e.key));
                    break;

                case 'c':
                    if(e.ctrlKey){
                        this.copyToClipboard();
                    }
                    break;
            }

         });
    }

    //calculator's operations

    clearAll(){
        this._operation = [];
        this._lastNumber = '';
        this._lastOperator = '';

        this.setLastNumberToDisplay();
    }

    clearEntry(){
        //this._operation.pop(); errado?
        this._operation.pop();
        this.setLastNumberToDisplay();
    }

    setError(){
        this.displayCalc = "Error";
    }

    addEventListenerAll(element, events, fn){
        events.split(' ').forEach(event =>{
            element.addEventListener(event, fn, false);
        });
    }

    isOperator(value){
        
        //indexof search for the 'value' inside the array
        //returns the index of value or return -1 if don't found 
        return(['+', '-', '*', '%', '/'].indexOf(value) > -1) 
        //return true or false according to the result of expression
    }

    getLastOperation(){
        return this._operation[this._operation.length-1];
    }

    setLastOperation(value){
        this._operation[this._operation.length-1] = value;
    }

    switchLastOperation(value){
        this._operation[this._operation.length-1] = value;
    }

    getResult(){

        try{
            return eval(this._operation.join(""));//join() is the oposite of split, it merges the array removing the separator

        }catch(e){

            setTimeout(()=>{//after execute this line, continue the program and the setTimeout method will be executed after 1 ms
                this.setError();

            }, 1);
        }
    }  

    getLastItem(isOp = true){//set arguments for true (default) to return a operator, false for a number
        
        let lastItem;

        for(let i = this._operation.length - 1; i >= 0; i--){

            if(this.isOperator(this._operation[i]) == isOp){
                lastItem = this._operation[i];
                break;
            }
        }

        if(!lastItem){//if didnt found the last operator in sentence

            lastItem = (this.isOperator) ? this._lastOperator : this._lastNumber;
        }

        return lastItem;

    }

    calculate(){

        let last = '';
        this._lastOperator = this.getLastItem(true);//saving last operator
        
        if(this._operation.length < 3){

            let firstItem = this._operation[0];
            this._operation = [firstItem, this._lastOperator, this._lastNumber];
        }

        if(this._operation.length > 3){//calculating the expression in pairs  //that if calculates the expression when another operator is inserted

            last = this._operation.pop();
            this._lastNumber = this.getResult();

        }else if(this._operation.length == 3){//when hit the equal button

            this._lastNumber = this.getLastItem(false);//saving last number digited

        }

        let result = this.getResult();

        if(last == '%'){

            result = result / 100;
            this._operation = [result];

        }else{

            this._operation = [result];
            
            if(last != '')    //verifying if 'last' is empty, if not, we push it
                this._operation.push(last);

            }

        this.setLastNumberToDisplay();

    }

    pushOperation(value){
        
        this._operation.push(value);

        if(this._operation.length > 3){
            this.calculate();
        }
    }

    setLastNumberToDisplay(){

        let lastNumber = this.getLastItem(false);

        if(!lastNumber){
            lastNumber = 0;
        }

        this.displayCalc = lastNumber;
    }

    addOperation(value){//add the value to sentence array

        //if last value isnt a number
        if(isNaN(this.getLastOperation())){

            if(this.isOperator(value)){

                //switching the last operator
                this.switchLastOperation(value);

            }else{
            
                this.pushOperation(value);
                this.setLastNumberToDisplay();
            }

        }else{ //if last value is a number

            if(this.isOperator(value)){//if was a operator, just insert
                
                this.pushOperation(value);

            }else{ //if isnt, concat the sequencial digited numbers
               
                let newValue = this.getLastOperation().toString() + value.toString();
                this.switchLastOperation(newValue);

                //refresh display
                this.setLastNumberToDisplay();
            }
        }
    }

    addDot(){
        
        let lastOperation = this.getLastOperation();

        //if expression is a string and already has a dot inside, it means we already added a dot, and it cant be added again
        if((typeof lastOperation === "string") && (lastOperation.split('').indexOf('.') > -1)){
            return;
        }

        if(this.isOperator(lastOperation) || !lastOperation){
            this.pushOperation('0.');
        }else{
            this.setLastOperation(lastOperation.toString() + '.');
        }

        this.setLastNumberToDisplay();
    }

    execBtn(value){

        this.playAudio();

        switch (value) {
            case "ac":

                this.clearAll();        
                break;

            case "ce":

                this.clearEntry();
                break;

            case "soma":
                this.addOperation('+');
                break;

            case "subtracao":
                this.addOperation('-');
                break;
            
            case "divisao":
                this.addOperation('/');
                break;

            case "multiplicacao":
                this.addOperation('*');
                break;

            case "porcento":
                this.addOperation('%');
                break;

            case "igual":
                this.calculate();
                break;
            
            case "ponto":
                this.addDot();
                break
            
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":

                this.addOperation(parseInt(value));
                break;

            default:
                this.setError();
                break;
        }
    }

    initButtonsEvents(){
                        //sinal de maior representa o seletor de classes filhas
        let buttons = document.querySelectorAll("#buttons > g, #parts > g");

        buttons.forEach(btn =>{

            this.addEventListenerAll(btn, "click drag", e=>{
                let btnText = btn.className.baseVal.replace("btn-", "");

                this.execBtn(btnText);
            });

            this.addEventListenerAll(btn, "mouseover mouseup mousedown", e=>{//e se refere ao evento que ocorreu
                btn.style.cursor = "pointer";
            });
        })

    }

    setDispayDateTime(){                                                        //personalizando o formato de saída da data
        this.displayDate = this.currentDate.toLocaleDateString(this._locale, {day: "2-digit", month: "long", year: "numeric"});
        this.displayTime = this.currentDate.toLocaleTimeString(this._locale);

    }
}